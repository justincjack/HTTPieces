
# HTTPieces Configuration file example
# ------------------------------------------------------------------------------
#
# [general]
# prohibit_all_methods_by_default = true
# auth_failover_to_default = true            <-- This means if an item is protected, but
#                                                 no auth is set up, it can be authenticated
#                                                 by using default credentials set up here in [general]
#
#
# default_auth_type = userpass               --- OPTIONS ---
#                                              open            - Anyone can access the resources
#                                              unix            - Compare Basic authentication info to system filesystem's permissions
#                                              userpass        - Compare Basic authentication to what's been configured in HTTPieces' configuration file.
#                                              userpass_digest - Uses MD5 digest authentication
#
#
# default_username = CountryBoi
# default_password = Kn0ckGn0ck
#
#
# [listener]
#
# ipversion = Either 4 or 6
#
# ipaddr = The IP address to listen on. Use 0.0.0.0 or IPADDR_ANY to
#         listen on any/all IPs.  Use another listener to add an IP address.
#
# listener-type = (One of the following below)
#
#                LT_TCP   A TCP socket
#                LT_UDP   A UDP socket
#                LT_TLS   An encrypted TCP socket
#                LT_DTLS  An encrypted UDP socket
#
#
#   --- security-xxx-proto OPTIONS: TLSv1.2, TLSv1.3, DTLSv1, DTLSv1.2 ---
#
# security-min-proto = TLSv1.2
# security-max-proto = TLSv1.3
#
# protocol_list = The application-layer protocol list that this listener
#                 is prepared to accept.  One or more of the following delimited
#                 by commas
#
#                 RAW_APP_LAYER - Perform no parsing of the application layer data.
#                                 This is mainly used for Micro-services that connect
#                                 to HTTPieces via local UNIX sockets.
#
#                 HTTP11        - HTTP/1.1
#                 WEBSOCKET     - The listener will accept "Upgrade" request for WebSocket
#                 HTTP20        - HTTP/2
#                 HTTP30        - HTTP/3 (future)
#
# port =         The port on which this listener will listen 1-65535
#
# tls_cert_file  = /path/to/and/filename/of/your_certificate.pem
# tls_chain_file = /path/to/and/filename/of/trust_chain.crt
# tls_key_file   = /path/to/and/filename/of/you_private.key
#
# http_document_root = /var/www  <-- path that the listener will use to start looking for resources requested via HTTP
#
# server_name = $hostname   <-- Will be used in the HTTP 'Server' header. Default is your server's hostname
#
# http_cors = $server_name      <-- By default this will be set to the 'server_name'
#
#                       --- Other Usage Examples ---
#                       http_cors = *    ; <-- Allow resource sharing from any other domain
#                       http_cors = my_other_server.com, google.com    ; <--- Allow resource sharing from 'my_other_server.com' and 'google.com'
#
#
# v--- Default settings for this listener, separate multiple values with commas
#
# allowed_methods = IDEMPOTENT_SAFE
#                   (AVAILABLE OPTIONS)
#                       GET
#                       POST
#                       DELETE
#                       TRACE
#                       CONNECT
#                       HEAD
#                       PUT
#                       OPTIONS
#                       ALL
#                       NONE
#                       IDEMPOTENT
#                       NON_IDEMPOTENT
#                       IDEMPOTENT_SAFE
#
#
#
#
# auth_type = open 
#                   --- Other options ---
#                   "userpass" which must be followed by "username" and "password" options
#                   "UNIX" which will take the HTTP authentication and compare it again
#                          the filesystem's
#
# v-- This now logically descends into a specific directory in the "document root"
#
#
# <directory name='api'>
#   allowed_methods = GET
#   protected_methods = POST,PUT
#   auth_type = userpass
#   username = canUCme
#   password = 4Th@L0v3ofM0n3y@214
#   http_cors = *
# </directory>
#
#
#
# <directory name='about_us'>
#	allowed_methods = GET
#	<file name='report.php'>
#               allowed_methods = NONE
#               protected_methods = POST
#               auth_type = userpass
#               username = canUCme
#               password = 4Th@L0v3ofM0n3y@214
#       </file>
# </directory>
#
#
#
# <directory name='secret_docs'>
#       allowed_methods = NONE
#       protected_methods = GET,POST
#       auth_type = UNIX
# </directory>
#
#
#
# <directory name='public'>
#       allowed_methods = GET, POST, OPTIONS
# </directory>
#
#
#
# <cgi name='user_specific_name'>
#       worker_count=10   <-- Default is 10
#       interpreter_path=/usr/bin/php
#       interpreter_args= -q   <-- All args passed to the interpreter - Separated by spaces as usual.  
#                                 This would be like executing: "/usr/bin/php -q" from the command line
#       accept_type=.php,.php7,.php5
#       working_directory=$document_root/cgi  <-- Optional
#       run_as_user=bob ; <-- Optional, default will be HTTPieces' owner.
#       env_xxxxxxxxx=yyyyyyyyyy      <-- Will be set as an environmental variable for the interpreter
#       env_PATH=/home/alice          <-- Will set "PATH=/home/alice" for the interpreters environment.
# </cgi>
# 
# <delegate>
#       desired_methods = POST
#       desired_specific_request_path = /update_job
#       unix_socket_path = /path/to/listening_program.sock
# </delegate>
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 


